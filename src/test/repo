
 <!--  js 파일 버전-->
  <script src="https://code.jquery.com/jquery-3.5.1.js"></script>

     <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>

  <!-- 유투브 파일 -->
  <div class="video-container" >
         <iframe width="853" height="480" src="//www.youtube.com/embed/Q8TXgCzxEnw?rel=0" frameborder="0" allowfullscreen></iframe>
   </div>
	@Autowired
	private AuthenticationManager authenticationManager;


   //			// 세션 등록
   //			Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword()));
   //			SecurityContextHolder.getContext().setAuthentication(authentication);

[카카오 시리즈]

// 웹 서버 주소
// 도메인 주소 :  http://localhost:8080

// 카카오 rest api키
07faac1b622c10aca2cf50a300ab0909


// 카카오 로그인이 잘 되었다면 redirct url (성공)
http://localhost:8001/auth/kakao/callback


// 로그인 요청 주소
GET /oauth/authorize?client_id=${REST_API_KEY}&redirect_uri=${REDIRECT_URI}&response_type=code HTTP/1.1
Host: kauth.kakao.com
https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=07faac1b622c10aca2cf50a300ab0909&redirect_uri=http://localhost:8001/auth/kakao/callback

https://kauth.kakao.com/oauth/authorize?client_id=07faac1b622c10aca2cf50a300ab0909&redirect_uri=http://localhost:8001/auth/kakao/callback&response_type=code HTTP/1.1


// 순서1. post방법 key-value 데이터를  카카오 쪽으로 요청해야함
		RestTemplate rt2 = new RestTemplate(); // 기존에는 HttpURLConntection을 사용했음,OkHttp,Retrofit2

		// http 오브젝트 생성
		HttpHeaders headers2 = new HttpHeaders(); // 헤더 생성
		// 헤더 정보 넣기
		headers2.add("Authorization","Bearer "+oAuthToken.getAccess_token());
		headers2.add("Content-type","application/x-www-form-urlencoded;charset=utf-8"); // 의미 내가 전송할 데이터의 형태를 알려줌

		// HttpHeader와 HttpBody를 하나의 오브젝트에 담기
		HttpEntity<MultiValueMap<String,String>> KakaoProfilesRequest = new HttpEntity<>(headers2);

		// Http 요청하기 - post방식
		ResponseEntity<String> response2 = rt2.exchange(
				"https://kapi.kakao.com/v2/user/me",
				HttpMethod.POST,
				KakaoProfilesRequest,
				String.class
		);

		// Gson : json형태 파싱 라이브러리 ObjectMapper
		ObjectMapper objectMapper2 = new ObjectMapper();
		KakaoProfile kakaoProfile = null;
		try {
			kakaoProfile = objectMapper2.readValue(response2.getBody(),KakaoProfile.class);
		} catch (JsonProcessingException e) {
			throw new RuntimeException(e);
		}

		// User 오브 젝트 : username,password,email
		System.out.println("카카오 아이디:"+kakaoProfile.getId());
		System.out.println("카카오 이메일:"+kakaoProfile.getKakao_account().getEmail());

		// 카카오부터 받은 정보를 가지고 => 나의 서비스에 로그인 시키기
		System.out.println("블로그 서버 유저네임:"+kakaoProfile.getKakao_account().getEmail()+"_"+kakaoProfile.getId());
		System.out.println("블로그 서버 이메일:"+kakaoProfile.getKakao_account().getEmail());
		System.out.println("블로그 서버 패스워드:"+cosKey);

		// 카카오 정보로 부터 받은 사용자의 정보를 나의 서비스에 회원가입 시키기
		User kakaoUser = User.builder()
				.username(kakaoProfile.getKakao_account().getEmail()+"_"+kakaoProfile.getId())
				.password(cosKey)
				.email(kakaoProfile.getKakao_account().getEmail())
				.oauth("kakao")
				.build();

		// 이미 사용중인 사용자 인지 or 신규고객
		User user = userService.findUser(kakaoUser.getUsername());

		if(user.getUsername() == null){
				//로그인 처리
			System.out.println("신규 회원 입니다");
			userService.joinUser(kakaoUser); // 회원가입 진행
		}
		System.out.println("자동 로그인 진행 중");

		// 로그인 처리
		Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(kakaoUser.getUsername(), cosKey));
		SecurityContextHolder.getContext().setAuthentication(authentication);
		System.out.println("33333333333333333333333333");


		return "redirect:/"; // code값으로  1.액세스 서버에 요청함
	}



package org.blog.project.model;

import lombok.Data;

@Data
public class OAuthToken {
    private String access_token;
    private String token_type;
    private String refresh_token;
    private int expires_in;
    private String scope;
    private int refresh_token_expires_in;

}




let index = {
		init: function(){
			$("#btn-save").on("click", ()=>{ // function(){} , ()=>{} this를 바인딩하기 위해서!!
				this.save();
			});
			$("#btn-update").on("click", ()=>{ // function(){} , ()=>{} this를 바인딩하기 위해서!!
				this.update();
			});
		},

		save: function(){
			//alert('user의 save함수 호출됨');
			let data = {
					username: $("#username").val(),
					password: $("#password").val(),
					email: $("#email").val()
			};

			//console.log(data);

			// ajax호출시 default가 비동기 호출
			// ajax 통신을 이용해서 3개의 데이터를 json으로 변경하여 insert 요청!!
			// ajax가 통신을 성공하고 서버가 json을 리턴해주면 자동으로 자바 오브젝트로 변환해주네요.
			$.ajax({
				type: "POST",
				url: "/auth/joinProc",
				data: JSON.stringify(data), // http body데이터
				contentType: "application/json; charset=utf-8",// body데이터가 어떤 타입인지(MIME)
				dataType: "json" // 요청을 서버로해서 응답이 왔을 때 기본적으로 모든 것이 문자열 (생긴게 json이라면) => javascript오브젝트로 변경
			}).done(function(resp){
				if(resp.status === 500){
					alert("회원가입에 실패하였습니다.");
				}else{
					alert("회원가입이 완료되었습니다.");
					location.href = "/";
				}
			}).fail(function(error){
				alert(JSON.stringify(error));
			});

		},

		update: function(){
			//alert('user의 save함수 호출됨');
			let data = {
					id: $("#id").val(),
					username: $("#username").val(),
					password: $("#password").val(),
					email: $("#email").val()
			};

			$.ajax({
				type: "PUT",
				url: "/user",
				data: JSON.stringify(data), // http body데이터
				contentType: "application/json; charset=utf-8",// body데이터가 어떤 타입인지(MIME)
				dataType: "json" // 요청을 서버로해서 응답이 왔을 때 기본적으로 모든 것이 문자열 (생긴게 json이라면) => javascript오브젝트로 변경
			}).done(function(resp){
				alert("회원수정이 완료되었습니다.");
				//console.log(resp);
				location.href = "/";
			}).fail(function(error){
				alert(JSON.stringify(error));
			});

		},
}

index.init();